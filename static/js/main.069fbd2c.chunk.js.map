{"version":3,"sources":["components/Input/Input.module.scss","components/Converter/Converter.module.scss","components/Input/Input.tsx","components/Button/Button.tsx","components/Converter/Converter.tsx","utils/convert.ts","App.tsx","index.tsx"],"names":["module","exports","Input","props","method","value","onChange","useState","error","setError","className","s","wrapper","helper","input","type","evt","val","target","METHOD","binToDec","lastSymbol","Number","slice","isDec","isCurrentLength","length","binChange","decToBin","decChange","Button","label","onClick","Converter","setValue","result","setResult","setMethod","block","text","prev","number","strVal","toString","digit","i","ex","convert","a","Math","floor","split","reverse","join","navigator","clipboard","writeText","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.069fbd2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3rPb3\",\"blink\":\"Input_blink__uRlyc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Converter_wrapper__3tEnc\"};","import React, { useState } from 'react';\n\nimport { METHOD } from '../Converter';\n\nimport s from './Input.module.scss';\n\nconst Input = (props: IProps) => {\n  const { method, value, onChange } = props;\n  const [error, setError] = useState<string | null>(null);\n\n  const binChange = (val: string) => {\n    const MAX_LENGTH = 22;\n    const lastSymbol = Number(val.slice(-1));\n    const isDec = lastSymbol === 0 || lastSymbol === 1;\n    const isCurrentLength = val.length < MAX_LENGTH;\n\n    if (isDec && isCurrentLength) {\n      onChange(val);\n    } else if (!isDec) {\n      setError('Enter a binary number (only 0 or 1)');\n    } else if (!isCurrentLength) {\n      setError(`Max length ${MAX_LENGTH} characters`);\n    }\n  };\n\n  const decChange = (val: string) => {\n    const MAX_LENGTH = 15;\n    const isCurrentLength = val.length < MAX_LENGTH;\n    if (isCurrentLength) {\n      onChange(val);\n    } else {\n      setError(`Max length ${MAX_LENGTH} characters`);\n    }\n  };\n\n  const onInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setError(null);\n    const val = evt.target.value;\n\n    if (method === METHOD.binToDec) {\n      binChange(val);\n    }\n    if (method === METHOD.decToBin) {\n      decChange(val);\n    }\n  };\n\n  return (\n    <div className={s.wrapper}>\n      {error && <span className={s.helper}>{error}</span>}\n      <input\n        className={s.input}\n        type=\"number\"\n        value={value}\n        onChange={onInputChange}\n      />\n    </div>\n  );\n};\n\ninterface IProps {\n  method: METHOD;\n  value: string;\n  onChange: (val: string) => void;\n}\n\nexport { Input };\n","import React from 'react';\n\nconst Button = (props: IProps) => {\n  const { label, onClick } = props;\n\n  return (\n    <button type=\"button\" onClick={onClick}>\n      {label}\n    </button>\n  );\n};\n\ninterface IProps {\n  onClick: () => void;\n  label: string;\n}\n\nexport { Button };\n","import React, { useState } from 'react';\n\nimport { Input } from '../Input';\nimport { Button } from '../Button';\nimport { convert, convertToDec } from '../../utils/convert';\n\nimport s from './Converter.module.scss';\n\nexport enum METHOD {\n  binToDec = 'Bin to Dec',\n  decToBin = 'Dec to Bin',\n}\n\nconst Converter = () => {\n  const [value, setValue] = useState('');\n  const [result, setResult] = useState<string | null>(null);\n  const [method, setMethod] = useState(METHOD.binToDec);\n\n  const onMethodChange = () => {\n    setMethod((prev) => {\n      if (prev === METHOD.binToDec) return METHOD.decToBin;\n      return METHOD.binToDec;\n    });\n  };\n\n  const onConvert = () => {\n    const number = Number(value);\n    if (method === METHOD.binToDec) {\n      setResult(convert(number));\n    }\n    if (method === METHOD.decToBin) {\n      setResult(convertToDec(number));\n    }\n  };\n\n  const onCopy = () => {\n    if (navigator && result) {\n      navigator.clipboard.writeText(result);\n    }\n  };\n\n  return (\n    <div className={s.wrapper}>\n      <div className={s.block}>\n        <span className={s.text}>Method:</span>\n        <Button label={method} onClick={onMethodChange} />\n      </div>\n      <Input method={method} value={value} onChange={setValue} />\n      <Button label=\"Convert!\" onClick={onConvert} />\n      <div>{`result: ${result}`}</div>\n      <Button label=\"Copy\" onClick={onCopy} />\n    </div>\n  );\n};\n\nexport { Converter };\n","export function convert(val: number) {\n  const strVal = val.toString();\n  const digit = strVal.length;\n  let result = 0;\n\n  for (let i = 0; i < strVal.length; i += 1) {\n    if (strVal[i] !== '0') {\n      const ex = digit - 1 - i;\n      const r = 2 ** ex;\n      result += r;\n    }\n  }\n\n  return result.toString();\n}\n\nexport function convertToDec(val: number) {\n  const a = (val: number): string => {\n    if (val === 1) {\n      return '1';\n    }\n    return (val % 2) + a(Math.floor(val / 2));\n  };\n\n  return a(val).split('').reverse().join('');\n}\n","import React from 'react';\nimport { Converter } from './components/Converter';\n\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Binary-to-Decimal number converter</h1>\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}